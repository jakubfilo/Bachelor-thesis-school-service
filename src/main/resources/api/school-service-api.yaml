openapi: 3.0.3
info:
  title: School service
  version: latest

paths:
  /school/course/all/ids:
    get:
      tags:
      - course-controller
      summary: Return ids of all courses
      operationId: getAllCourseIds
      responses:
        '200':
          description: All course ids
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseIds'
  /school/course/all/detail:
    get:
      tags:
      - course-controller
      summary: Return complete details of all courses
      operationId: getAllCourseDetails
      responses:
        '200':
          description: All course details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleCourseDetail'
  /school/course/all/detail/brief:
    get:
      tags:
      - course-controller
      summary: Return brief details of all courses
      operationId: getAllCourseDetailsBrief
      responses:
        '200':
          description: All course brief details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleCourseDetailBrief'
  /school/course/{courseId}/detail:
    get:
      tags:
      - course-controller
      summary: Return details of course with given id
      operationId: getCourseDetail
      parameters:
      - name: courseId
        in: path
        description: Id of course to return
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Detail for course with given Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
        '404':
          description: Course not found
  /school/course/{courseId}/detail/brief:
    get:
      tags:
      - course-controller
      summary: Return brief details of course with given id
      operationId: getCourseDetailBrief
      parameters:
      - name: courseId
        in: path
        description: Id of course to return
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Brief detail for course with given Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetailBrief'
        '404':
          description: Course not found

  /school/department/list:
    get:
      tags:
      - department-controller
      summary: Return list of all departments
      operationId: getAllDepartments
      responses:
        '200':
          description: All departments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentList'

  # TODO maybe add similar endpoint to this one that will return more detail about department and is sortable

  /school/department/detail:
    get:
      tags:
      - department-controller
      summary: Return detail of selected department
      operationId: getAllDepartmentDetails
      parameters:
      - name: department
        in: query
        description: Department Type
        required: true
        schema:
          $ref: '#/components/schemas/DepartmentType'
      responses:
        '200':
          description: All department details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentDetail'
        '404':
          description: Department not found

  /school/department/head:
    get:
      tags:
      - department-controller
      summary: Return details about head of department
      operationId: getDepartmentHead
      parameters:
      - name: department
        in: query
        description: Department Type
        required: true
        schema:
          $ref: '#/components/schemas/DepartmentType'
      responses:
        '200':
          description: Head of department
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentHeadDetail'


# TODO add more APIs, add at least one endpoint, that will be used by Service-A that is not implemented yet


components:
  schemas:
    DepartmentType:
      type: string
      enum:
      - COMPUTER_SCIENCE
      - MATHEMATICS
      - MECHANICAL_ENGINEERING
      - SCIENCE
    Department:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/DepartmentType'
        description:
          type: string
      example:
        name: Computer Science
        description: Department of Computer Science
    DepartmentList:
      type: object
      properties:
        departments:
          type: array
          items:
            $ref: '#/components/schemas/Department'
    CourseIds:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    CourseDetail:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        department:
          $ref: '#/components/schemas/Department'
        credits:
          type: integer
          format: int32
        duration:
          type: integer
          format: int32
        enrolledStudentsCount:
          type: integer
          format: int32
        enrolledStudentsIds:
          type: array
          default: []
          items:
            type: string
        # TODO add list of student IDs enrolled in course
    MultipleCourseDetail:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/CourseDetail'
        coursesCount:
          type: integer
          format: int32
    CourseDetailBrief:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: string
        name:
          type: string
    MultipleCourseDetailBrief:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/CourseDetailBrief'
        coursesCount:
          type: integer
          format: int32
    DepartmentHeadDetail:
      type: object
      properties:
        name:
          type: string
        department:
          $ref: '#/components/schemas/Department'
        email:
          type: string
        phone:
          type: string
        # TODO add more details about head of department
    DepartmentDetail:
      type: object
      properties:
        department:
          $ref: '#/components/schemas/Department'
        courses:
          type: array
          items:
            $ref: '#/components/schemas/CourseDetail'
        head:
          $ref: '#/components/schemas/DepartmentHeadDetail' # Todo change this to something else

        # TODO add more details about department






